<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.applicationBase</string>
		<string>com.apple.dt.unit.iosBase</string>
		<string>com.apple.dt.unit.languageChoice</string>
	</array>
	<key>Components</key>
	<array/>
	<key>Definitions</key>
	<dict>
		<key>*:implementation:methods:applicationDidBecomeActive:comments</key>
		<string>// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</string>
		<key>*:implementation:methods:applicationDidEnterBackground:comments</key>
		<string>// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
</string>
		<key>*:implementation:methods:applicationWillEnterForeground:comments</key>
		<string>// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.</string>
		<key>*:implementation:methods:applicationWillResignActive:comments</key>
		<string>// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
// Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
</string>
		<key>*:implementation:methods:applicationWillTerminate:comments</key>
		<string>// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.</string>
		<key>Info.plist:UIRequiredDeviceCapabilities</key>
		<dict>
			<key>Beginning</key>
			<string>&lt;key&gt;UIRequiredDeviceCapabilities&lt;/key&gt;
&lt;array&gt;</string>
			<key>End</key>
			<string>&lt;/array&gt;</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>Info.plist:UIRequiredDeviceCapabilities:base</key>
		<string>&lt;string&gt;armv7&lt;/string&gt;</string>
		<key>Info.plist:iPhone</key>
		<string>&lt;key&gt;LSRequiresIPhoneOS&lt;/key&gt;
&lt;true/&gt;</string>
		<key>Info.plist:statusBarTintForNavBar</key>
		<string>&lt;key&gt;UIStatusBarTintParameters&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;UINavigationBar&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;Style&lt;/key&gt;
        &lt;string&gt;UIBarStyleDefault&lt;/string&gt;
        &lt;key&gt;Translucent&lt;/key&gt;
        &lt;false/&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
</string>
	</dict>
	<key>Identifier</key>
	<string>org.tiny4.dt.unit.cocoaTouchApplicationBase</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>Info.plist:iPhone</string>
		<string>Info.plist:UIRequiredDeviceCapabilities:base</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>Universal</string>
			<key>Description</key>
			<string>Which device family to create a project for</string>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Name</key>
			<string>Devices:</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>popup</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>Images.xcassets</key>
						<dict>
							<key>Path</key>
							<string>Images-Universal.xcassets</string>
							<key>SortOrder</key>
							<integer>100</integer>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>Info.plist:UISupportedInterfaceOrientations~iPhone</string>
						<string>Info.plist:UISupportedInterfaceOrientations~iPad</string>
					</array>
					<key>Project</key>
					<dict>
						<key>SharedSettings</key>
						<dict>
							<key>TARGETED_DEVICE_FAMILY</key>
							<string>1,2</string>
						</dict>
					</dict>
				</dict>
				<key>iPad</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>Images.xcassets</key>
						<dict>
							<key>Path</key>
							<string>Images-iPad.xcassets</string>
							<key>SortOrder</key>
							<integer>100</integer>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>Info.plist:UISupportedInterfaceOrientations~iPad</string>
					</array>
					<key>Project</key>
					<dict>
						<key>SharedSettings</key>
						<dict>
							<key>TARGETED_DEVICE_FAMILY</key>
							<string>2</string>
						</dict>
					</dict>
				</dict>
				<key>iPhone</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>Images.xcassets</key>
						<dict>
							<key>Path</key>
							<string>Images-iPhone.xcassets</string>
							<key>SortOrder</key>
							<integer>100</integer>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>Info.plist:UISupportedInterfaceOrientations~iPhone</string>
					</array>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>languageChoice</string>
			<key>Units</key>
			<dict>
				<key>Objective-C</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>*:implementation:methods:didReceiveMemoryWarning:super</key>
						<string>[super didReceiveMemoryWarning];
// Dispose of any resources that can be recreated.</string>
						<key>*:implementation:methods:viewDidLoad:super</key>
						<string>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
self.view.backgroundColor = [UIColor whiteColor];</string>
						<key>AppDelegate.h:interface:window</key>
						<string>@property (strong, nonatomic) UIWindow *window;
</string>
						<key>AppDelegate.m:implementation:methods:applicationdidFinishLaunchingWithOptions:body</key>
						<string>// Override point for customization after application launch.
#if __ANDROID__
	[[UIScreen mainScreen] setScreenMode:UIScreenSizeModePad scale:0];
#endif
						
self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
self.window.rootViewController = [[ViewController alloc] initWithNibName:nil bundle:nil];
[self.window makeKeyAndVisible];
						</string>
						<key>AppDelegate.m:implementation:methods:applicationdidFinishLaunchingWithOptions:return</key>
						<string>return YES;</string>
						<key>main.m:main</key>
						<dict>
							<key>Beginning</key>
							<string>int main(int argc, char * argv[]) {</string>
							<key>End</key>
							<string>}</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>
						<key>main.m:main:UIApplicationMain</key>
						<string>@autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
}
</string>
						<key>TNAndroidLauncher.h</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>TNAndroidLauncher.h</string>
							<key>TargetIndices</key>
							<array>
								<integer>0</integer>
							</array>
						</dict>
						<key>TNAndroidLauncher.m</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>TNAndroidLauncher.m</string>
						</dict>
						<key>Android.mk</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>Android.mk</string>
							<key>TargetIndices</key>
							<array/>
						</dict>
						<key>Android.xcconfig</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>Android.xcconfig</string>
							<key>TargetIndices</key>
							<array/>
						</dict>
						<key>MainActivity.java</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>MainActivity.java</string>
							<key>TargetIndices</key>
							<array/>
						</dict>
						<key>AndroidManifest.xml</key>
						<dict>
							<key>Group</key>
							<string>Supporting Files</string>
							<key>Path</key>
							<string>AndroidManifest.xml</string>
							<key>TargetIndices</key>
							<array/>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>main.m:comments</string>
						<string>main.m:imports:importCocoa</string>
						<string>main.m:imports:importHeader:AppDelegate.h</string>
						<string>main.m:main:UIApplicationMain</string>
						<string>AppDelegate.h:comments</string>
						<string>AppDelegate.h:imports:importCocoa</string>
						<string>AppDelegate.h:interface(AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;)</string>
						<string>AppDelegate.h:interface:window</string>
						<string>AppDelegate.m:comments</string>
						<string>AppDelegate.m:imports:importHeader:AppDelegate.h</string>
						<string>AppDelegate.m:imports:importHeader:ViewController.h</string>
						<string>AppDelegate.m:extension</string>
						<string>AppDelegate.m:implementation:synthesize</string>
						<string>AppDelegate.m:implementation:methods:applicationdidFinishLaunchingWithOptions(- (BOOL\)application:(UIApplication *\)application didFinishLaunchingWithOptions:(NSDictionary *\)launchOptions)</string>
						<string>AppDelegate.m:implementation:methods:applicationdidFinishLaunchingWithOptions:body</string>
						<string>AppDelegate.m:implementation:methods:applicationdidFinishLaunchingWithOptions:return</string>
						<string>AppDelegate.m:implementation:methods:applicationWillResignActive(- (void\)applicationWillResignActive:(UIApplication *\)application)</string>
						<string>AppDelegate.m:implementation:methods:applicationWillResignActive:comments</string>
						<string>AppDelegate.m:implementation:methods:applicationDidEnterBackground(- (void\)applicationDidEnterBackground:(UIApplication *\)application)</string>
						<string>AppDelegate.m:implementation:methods:applicationDidEnterBackground:comments</string>
						<string>AppDelegate.m:implementation:methods:applicationWillEnterForeground(- (void\)applicationWillEnterForeground:(UIApplication *\)application)</string>
						<string>AppDelegate.m:implementation:methods:applicationWillEnterForeground:comments</string>
						<string>AppDelegate.m:implementation:methods:applicationDidBecomeActive(- (void\)applicationDidBecomeActive:(UIApplication *\)application)</string>
						<string>AppDelegate.m:implementation:methods:applicationDidBecomeActive:comments</string>
						<string>AppDelegate.m:implementation:methods:applicationWillTerminate(- (void\)applicationWillTerminate:(UIApplication *\)application)</string>
						<string>AppDelegate.m:implementation:methods:applicationWillTerminate:comments</string>
						<string>TNAndroidLauncher.h</string>
						<string>TNAndroidLauncher.m</string>
						<string>Android.xcconfig</string>
						<string>Android.mk</string>
						<string>MainActivity.java</string>
						<string>AndroidManifest.xml</string>
					</array>
					<key>Targets</key>
					<array>
						<dict>
							<key>BuildPhases</key>
							<array>
								<dict>
									<key>Class</key>
									<string>ShellScript</string>
									<key>ShellPath</key>
									<string>/bin/sh</string>
									<key>ShellScript</key>
									<string>
relpath()
{
    s=$(cd ${1%%/};pwd); d=$(cd $2;pwd); while [ &quot;${d#$s/}&quot; == &quot;${d}&quot; ]
    do s=$(dirname $s);b=&quot;../${b}&quot;; done; echo ${b}${d#$s/}
}
    
#setting PATH
PATH=$(bash -l -c &apos;echo $PATH&apos;)

echo &quot;current direct&quot;
pwd

TN_EXEC_PATH=&quot;$TARGET_BUILD_DIR/$EXECUTABLE_PATH&quot;
echo $TN_EXEC_PATH

#Temp Android Project Path
TN_ANDROID_PROJECT_PATH=&quot;$TARGET_BUILD_DIR/android&quot;

PRODUCT_IDENTIFIER=`/usr/libexec/PlistBuddy -c &quot;Print :CFBundleIdentifier&quot; $TARGET_BUILD_DIR/$INFOPLIST_PATH`
echo $ROOT_PRODUCT_IDENTIFIER_PLIST

if [[ ! -d $TN_ANDROID_PROJECT_PATH ]]; then
mkdir -p $TN_ANDROID_PROJECT_PATH
fi

pushd $TN_ANDROID_PROJECT_PATH

## create project if needs
if [[ ! -f AndroidManifest.xml ]]; then
android create project --target 1 --name $PRODUCT_NAME --path ./ --activity MainActivity --package $PRODUCT_IDENTIFIER
mkdir -p jni


# patch AndroidManifest.xml
echo &quot;patching AndroidManifest.xml..&quot;
cp &quot;$SRCROOT/$PRODUCT_NAME/AndroidManifest.xml&quot; ./

# patch MainActivity.java
echo &quot;patching MainActivity.java..&quot;
java_dest=`find . -name MainActivity.java`
cp &quot;$SRCROOT/$PRODUCT_NAME/MainActivity.java&quot; &quot;$java_dest&quot;

# include CocoaActivity lib
    
SDK_REAL_PATH=`readlink /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/Android18.sdk`
    
CocoaActivity_PATH=$SDK_REAL_PATH/System/Library/Frameworks/CocoaActivity
    
##check CocoaActivity exist
    
if [[ ! -d $CocoaActivity_PATH ]]; then
    echo &quot;CocoaActivity doesn&apos;t exist. please build UIKIt first&quot;
    ##clean
    rm -rf $TN_ANDROID_PROJECT_PATH
    exit 1
fi
    
echo &quot;Resolving CocoaActivity relative path...&quot;

TN_CURRENT=`pwd`
Relative_Library_Path=`relpath $TN_CURRENT $CocoaActivity_PATH`

echo &quot;add CocoaActivity as library...&quot;
android update project --target 1 --path . --library $Relative_Library_Path

#update app name
sed -i .bak -e &quot;s/&gt;MainActivity&lt;/&gt;$PRODUCT_NAME&lt;/&quot; res/values/strings.xml
rm res/values/strings.xml.bak

fi

#copy jni files
echo &quot;coping jni files..&quot;
cp &quot;$TN_EXEC_PATH&quot; &quot;jni/$EXECUTABLE_NAME.so&quot;
cp &quot;$SRCROOT/$PRODUCT_NAME/Android.mk&quot; jni/

#copy resources
echo &quot;coping resources...&quot;
mkdir -p assets
cp -R &quot;$TARGET_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH/&quot; assets/

#build ndk
ndk-build

# run if needs
    
popd
</string>
								</dict>
							</array>
							<key>BasedOn</key>
							<dict>
								<key>Debug</key>
								<string>Android.xcconfig</string>
								<key>Release</key>
								<string>Android.xcconfig</string>
							</dict>
							<key>Frameworks</key>
							<array>
								<string>UIKit</string>
							</array>
							<key>SharedSettings</key>
							<dict/>
						</dict>
					</array>
				</dict>
				<key>Swift</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>*:implementation:methods:didReceiveMemoryWarning:super</key>
						<string>super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.</string>
						<key>*:implementation:methods:viewDidLoad:super</key>
						<string>super.viewDidLoad()
// Do any additional setup after loading the view, typically from a nib.</string>
						<key>AppDelegate.swift:UIApplicationMain</key>
						<string>@UIApplicationMain</string>
						<key>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions:body</key>
						<string>// Override point for customization after application launch.</string>
						<key>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions:return</key>
						<string>return true</string>
						<key>AppDelegate.swift:implementation:properties:window</key>
						<string>var window: UIWindow?</string>
					</dict>
					<key>Nodes</key>
					<array>
						<string>AppDelegate.swift:comments</string>
						<string>AppDelegate.swift:imports:importCocoa</string>
						<string>AppDelegate.swift:UIApplicationMain</string>
						<string>AppDelegate.swift:implementation(AppDelegate: UIResponder, UIApplicationDelegate)</string>
						<string>AppDelegate.swift:implementation:properties:window</string>
						<string>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions(func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?\) -&gt; Bool)</string>
						<string>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions:body</string>
						<string>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions:return</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillResignActive(func applicationWillResignActive(application: UIApplication\))</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillResignActive:comments</string>
						<string>AppDelegate.swift:implementation:methods:applicationDidEnterBackground(func applicationDidEnterBackground(application: UIApplication\))</string>
						<string>AppDelegate.swift:implementation:methods:applicationDidEnterBackground:comments</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillEnterForeground(func applicationWillEnterForeground(application: UIApplication\))</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillEnterForeground:comments</string>
						<string>AppDelegate.swift:implementation:methods:applicationDidBecomeActive(func applicationDidBecomeActive(application: UIApplication\))</string>
						<string>AppDelegate.swift:implementation:methods:applicationDidBecomeActive:comments</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillTerminate(func applicationWillTerminate(application: UIApplication\))</string>
						<string>AppDelegate.swift:implementation:methods:applicationWillTerminate:comments</string>
					</array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>Project</key>
	<dict>
		<key>Configurations</key>
		<dict>
			<key>Debug</key>
			<dict/>
			<key>Release</key>
			<dict/>
		</dict>
		<key>SharedSettings</key>
		<dict>
			<key>CODE_SIGN_IDENTITY[sdk=iphoneos*]</key>
			<string>iPhone Developer</string>
		</dict>
	</dict>
	<key>Targets</key>
	<array>
		<dict>
			<key>SharedSettings</key>
			<dict>
				<key>ASSETCATALOG_COMPILER_APPICON_NAME</key>
				<string>AppIcon</string>
				<key>LD_RUNPATH_SEARCH_PATHS</key>
				<string>$(inherited) @executable_path/Frameworks</string>
			</dict>
			<key>TargetIdentifier</key>
			<string>com.apple.dt.cocoaTouchApplicationTarget</string>
		</dict>
	</array>
</dict>
</plist>
