#!/bin/sh

checkError()
{
    if [ "${1}" -ne "0" ]; then
        echo "*** Error: ${2}"
        exit ${1}
    fi
}

cleanUp()
{
	if [ "$MIRAI_CLEAN_UP" == "yes" ]; then
		#clean up
		rm -rf opengcd
	fi
}

build_opengcd()
{
	if [ ! -d opengcd ]; then
		git clone https://github.com/mheily/opengcd.git
		pushd opengcd
		./autogen.sh
	
		patch -p0 -i ../libkqueue_signal.patch
		patch -p0 -i ../libkqueue_makefile.patch
		
		pushd libkqueue
		
		patch -p1 -i ../../libkqueue_GNU_SOURCE.patch
		patch -p1 -i ../../libkqueue_timerfd.patch
		
		autoreconf -fvi
		popd
	
		popd
	fi

	pushd opengcd
	
	if [ ! -f $MIRAI_SDK_PREFIX/lib/libBlocksRuntime.a ]; then
		# we use gcc here
		# libkqueue use TLS, use clang to build will cause symbol undefined at link time, because android donesn't support TLS
		# gcc provided a emulation TLS layer for platform that doesn't support TLS
		CFLAGS="-DHAVE_SYS_EVENTFD_H=1 $ARCHFLAGS" CC=$CROSS_GCC ./configure --host=$HOSTEABI --prefix=$MIRAI_SDK_PREFIX -enable-shared=no
		checkError $? "configure dispatch dependencies failed"

		make
		checkError $? "build dispatch dependencies failed"
	
		make install	
		
		make clean
	fi

	if [ ! -f libdispatch_patched ]; then
		pushd libdispatch
	    patch -p0 < ../patch/dispatch-workaround.diff 
	    patch -p0 < ../patch/dispatch-spawn.diff
		patch -p0 < ../../dispatch_disable_test.patch
	
		autoreconf -fvi
	
	    patch -p1 < ../../libtool_android_version.patch
		autoconf -f
		popd
		
		touch libdispatch_patched
	fi

	
	pushd libdispatch
	
	ac_cv_lib_pthread_workqueue_pthread_workqueue_init_np=yes PKG_CONFIG_PATH=$MIRAI_SDK_PKG_CONFIG_PATH CFLAGS="$ARCHFLAGS -DANDROID=1 -DHAVE_SYS_EVENTFD_H=1" CC=$CROSS_CLANG \
	LDFLAGS=" -lgnustl_shared -lc " \
	./configure --host=$HOSTEABI --prefix=$MIRAI_SDK_PREFIX
	checkError $? "configure libdispatch failed"
	
	make -j4
	checkError $? "build libdispatch failed"
	
	make install
	
	make clean
	
	popd
	
	popd
}

if [ ! -f $MIRAI_SDK_PREFIX/lib/libdispatch.so ]; then
    echo "Building libDispatch"
	build_opengcd
fi

cleanUp
